//Tehnyt Teemu Laukka

#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <Servo.h>

//========================================================================================================
#define timeSeconds 60
//========================================================================================================

int Led_Red = D2; //punainen led
int Led_Green = D3; //vihreä led

Servo servo;

//oman reitittimen sekä brokerin tiedot
const char* ssid = "Wlan Nimi";  //wlan nimi
const char* password = "Wlan Salasana"; //wlan salasana
const char* mqtt_server = "broker.hivemq.com"; //MQTT server

//========================================================================================================
// asetetaan kello
unsigned long now = millis();
unsigned long lastTrigger = 0;
boolean startTimer = false;
//========================================================================================================

WiFiClient espClient;
PubSubClient client(espClient);
 //long lastMsg = 0;
// char msg[50];
 int value = 0;

void setup_wifi() {
   delay(100);
  // NodeMCU alkaa yhdistämään internettiin
    Serial.print("Yhdistetään :");
    Serial.println(ssid);
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) 
    {
      delay(500);
      Serial.print(".");
    }
  randomSeed(micros());
  Serial.println("");
  Serial.println("Yhdistetty");
 // Serial.println("IP Osoite: "); // tarvittaessa jos haluaa nähdä NodeMCU:n IP:N
 // Serial.println(WiFi.localIP());
}

void callback(char* topic, byte* payload, unsigned int length) 
{
  Serial.print("MQTT brokerilta, Topic  :");
  Serial.print(topic);
  int p =(char)payload[0]-'0';
  // Printtaa jos brokerilta tulee tietty viesti
  // Määrätään että brokerilta pitää tulla seuraavat 

 
if (p==0)  { //Lukko suljetaan
  Serial.println(" Lukko Suljettiin"); 
  client.publish("TVTLukko", "0"); //Jos p=0 lähettää viestin topiciin "tämä", viestin "tuo"
LukkoKiinni();

}
if (p==1)  { //Lukko aukaistaan
  Serial.println(" Lukko aukaistiin"); 
LukkoAuki();
AukaiseLukko();
}

  Serial.println();
} // Callback loppuu

//========================================================================================================
ICACHE_RAM_ATTR void AukaiseLukko() { //keskeytys palvelin
  
  startTimer = true;
  lastTrigger = millis();
}
//========================================================================================================
//========================================================================================================
void LukkoKiinni() {  // aliohjela suljetaan lukko
  
  servo.write(0); //Servo kääntyy 0 asteeseen
  value=0;
  analogWrite(Led_Red, HIGH);
  delay(500);
  analogWrite(Led_Red, LOW);
 
}
void LukkoAuki() { //aliohjelma lukko aukaistaan
  
  client.publish("TVTLukko", "1"); //Jos p=1 lähettää viestin topiciin "tämä", viestin "tuo"
  servo.write(90); //Servo kääntyy 90 asteeseen
  value=90;
  analogWrite(Led_Green, HIGH);
  delay(500);
  analogWrite(Led_Green, LOW);
}
//========================================================================================================

void reconnect() {
  // Muodostaa yhteyttä kunnes yhteys on muodostettu
  while (!client.connected()) // aloitetaan MQTT serverille yhdistäminen
  {
    Serial.print("Yhdistetään MQTT Brokeriin..."); 
     // Toteutetaan "asiakasnumero" jotta saadaan tehdä kyselyitä
      String clientId = "ESP8266Client-";
      clientId += String(random(0xffff), HEX);
       if (client.connect(clientId.c_str()))
    {
      Serial.println("Yhdistetty");
     // nyt kun on yhdistetty MQTT serverille aletaan Tilaamaan topiceja:
      client.subscribe("Tunnistettu"); // tilataan viesti Topicilta tämä
      client.subscribe("napilta");  // tilataan viesti Topicilta tämä
     
    } else { //jos yhteys epäonnistuu MQTT serverille 
      Serial.print("Yhteys epäonnistui, rc=");
      Serial.print(client.state());
      Serial.println("Yhdistetään uudelleen 5 sekunnin kuluttua");
      // Kokeillaan yhdistää uudestaan 6 sekunnin kuluttua
      delay(6000);
    }
  }
} //Reconnect Loppuu

void setup() {

  Serial.begin(115200);
  setup_wifi();
  client.setServer(mqtt_server, 1883); //Kujletaan portin tämä kautta
  client.setCallback(callback);
   servo.attach(2); //asetetaan Servo
   pinMode(Led_Red, OUTPUT); 
   pinMode(Led_Green, OUTPUT); 
   //========================================================================================================
attachInterrupt(D4, AukaiseLukko, RISING); //keskeytyspalvelin
   //========================================================================================================
}

void LahetaKiinni(){
  while(1){
    Serial.println("odottaa");
  }
}

void loop() {
 
  //========================================================================================================
  now = millis(); // kello alkaa raksuttamaan
  lastTrigger = 0;
  // Turn off the LED after the number of seconds defined in the timeSeconds variable
  if(startTimer && (now - lastTrigger > (timeSeconds*1000))) {
   startTimer = false;
    client.publish("TVTLukko", "0");
    LukkoKiinni();
    LahetaKiinni();
    
  }
 // if (startTimer == false){
 //LukkoKiinni();
 // client.publish("TVTLukko", "0");
 // }
  //========================================================================================================
  
  if (!client.connected()) { // tällä toteutetaan jatkuva topicin tilaus
    reconnect(); //pidetään yhteys auki ja kuunnellaan
  }
  client.loop();

}
